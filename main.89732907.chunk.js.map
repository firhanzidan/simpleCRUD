{"version":3,"sources":["components/NavbarComponent.js","components/TableComponent.js","containers/ListContactContainer.js","actions/userAction.js","components/BackComponent.js","containers/CreateContact.js","containers/DetailContact.js","containers/EditContact.js","App.js","serviceWorker.js","reducers/users.js","reducers/index.js","index.js"],"names":["NavbarComponent","props","useState","isOpen","setIsOpen","Navbar","color","light","expand","Container","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","NavbarText","SearchBar","Search","columns","dataField","text","sort","headerStyle","width","datafield","formatter","rowContent","row","to","id","Button","classname","defaultSorted","order","connect","state","getUsersList","users","errorUsersList","bootstrap4","keyField","data","search","Row","Col","searchProps","placeholder","baseProps","pagination","paginationFactory","ListContactContainer","this","dispatch","axios","get","then","response","type","payload","errorMessage","catch","error","message","Component","BackComponent","CreateContact","DetailContact","EditContact","App","path","exact","Boolean","window","location","hostname","match","initialState","getUserDetail","errorUserDetail","getResponDataUser","errorResponDataUser","title","action","combineReducers","form","formReducer","store","createStore","reducer","compose","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.89732907.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavbarText,\r\n  Container\r\n} from 'reactstrap';\r\n\r\nconst NavbarComponent = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <Container>\r\n          <NavbarBrand href=\"/\">Contact List</NavbarBrand>\r\n          <NavbarToggler onClick={toggle} />\r\n            <Collapse isOpen={isOpen} navbar>\r\n              <Nav className=\"mr-auto\" navbar>\r\n                <UncontrolledDropdown nav inNavbar>\r\n                  <DropdownToggle nav caret>\r\n                    Mode\r\n                  </DropdownToggle>\r\n                  <DropdownMenu right>\r\n                    <DropdownItem>\r\n                      Dark Mode\r\n                    </DropdownItem>\r\n                    <DropdownItem>\r\n                      Bright Mode\r\n                    </DropdownItem>\r\n                    <DropdownItem divider />\r\n                    <DropdownItem>\r\n                      Reset\r\n                    </DropdownItem>\r\n                  </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n              </Nav>\r\n              <NavbarText>+6281808813751</NavbarText>\r\n          </Collapse>\r\n       </Container>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavbarComponent;","// import React from 'react';\r\n// import { Table, Container, Button } from 'reactstrap';\r\n\r\n// const TableComponent = (props) => {\r\n//   return (\r\n//     <Table>\r\n//         <Container>\r\n//       <thead>\r\n//         <tr>\r\n//           <th>#</th>\r\n//           <th>First Name</th>\r\n//           <th>Last Name</th>\r\n//           <th>Number</th>\r\n//           <th></th>\r\n//         </tr>\r\n//       </thead>\r\n//       <tbody>\r\n//         <tr>\r\n//           <th scope=\"row\">1</th>\r\n//           <td>Mark</td>\r\n//           <td>Otto</td>\r\n//           <td>08111111111</td>\r\n//           <td><Button color=\"info\">EDIT</Button> <Button color=\"danger\">DELETE</Button></td>\r\n//         </tr>\r\n//         <tr>\r\n//           <th scope=\"row\">2</th>\r\n//           <td>Jacob</td>\r\n//           <td>Thornton</td>\r\n//           <td>0822222222</td>\r\n//           <td><Button color=\"info\">EDIT</Button> <Button color=\"danger\">DELETE</Button></td>\r\n//         </tr>\r\n//         <tr>\r\n//           <th scope=\"row\">3</th>\r\n//           <td>Larry</td>\r\n//           <td>the Bird</td>\r\n//           <td>08333333333</td>\r\n//           <td><Button color=\"info\">EDIT</Button> <Button color=\"danger\">DELETE</Button></td>\r\n//         </tr>\r\n//       </tbody>\r\n//       </Container>\r\n//     </Table>\r\n//   );\r\n// }\r\n\r\n// export default TableComponent;\r\n\r\nimport React from \"react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { Container, Button, Row, Col } from \"reactstrap\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\n\r\nconst { SearchBar } = Search;\r\n\r\nconst columns = [\r\n  {\r\n    dataField: \"id\",\r\n    text: \"ID\",\r\n    sort: true,\r\n    headerStyle: () => {\r\n      return { width: \"5%\" };\r\n    },\r\n  },\r\n  {\r\n    dataField: \"name\",\r\n    text: \"Name\",\r\n    sort: true,\r\n  },\r\n  {\r\n    dataField: \"phone\",\r\n    text: \"Phone\",\r\n    sort: true,\r\n  },\r\n  {\r\n    datafield: \"link\",\r\n    text: \"action\",\r\n    formatter: (rowContent, row) => {\r\n      return (\r\n        <div>\r\n          <Link to={\"detail/\" + row.id}>\r\n            <Button color=\"info\" classname=\"mr-2\">\r\n              Detail\r\n            </Button>\r\n          </Link>\r\n          <Link to={\"edit/\" + row.id}>\r\n            <Button color=\"warning\" classname=\"mr-2\">\r\n              Edit\r\n            </Button>\r\n          </Link>\r\n          <Link>\r\n            <Button color=\"danger\" classname=\"mr-2\">\r\n              Delete\r\n            </Button>\r\n          </Link>\r\n        </div>\r\n      );\r\n    },\r\n  },\r\n];\r\n\r\nconst defaultSorted = [\r\n  {\r\n    dataField: \"id\",\r\n    order: \"asc\",\r\n  },\r\n];\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    getUsersList: state.users.getUsersList,\r\n    errorUsersList: state.users.errorUsersList\r\n  }\r\n}\r\n\r\nconst TableComponent = (props) => {\r\n  return (\r\n    <Container>\r\n      {props.getUsersList ?\r\n      <ToolkitProvider\r\n        bootstrap4\r\n        keyField=\"id\"\r\n        data={props.getUsersList}\r\n        columns={columns}\r\n        defaultSorted={defaultSorted}\r\n        search\r\n      >\r\n        {(props) => (\r\n          <div>\r\n            <Row>\r\n              <Col>\r\n                <Link to=\"/create\">\r\n                  <Button color=\"info\" classname=\"mr-2\">\r\n                    Create Contact\r\n                  </Button>\r\n                </Link>\r\n              </Col>\r\n              <Col>\r\n                <div className=\"float-right\">\r\n                  <SearchBar\r\n                    {...props.searchProps}\r\n                    placeholder=\"Search Contatcs\"\r\n                  />\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <BootstrapTable\r\n              {...props.baseProps}\r\n              pagination={paginationFactory()}\r\n            />\r\n          </div>\r\n        )}\r\n      </ToolkitProvider> :null}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(TableComponent);\r\n","\r\nimport React, { Component } from \"react\";\r\nimport TableComponent from \"../components/TableComponent\";\r\nimport { connect } from \"react-redux\";\r\nimport { getUsersList, deleteDataUser } from '../actions/userAction'\r\n\r\nclass ListContactContainer extends Component {\r\n  componentDidMount() {\r\n    this.props.dispatch(getUsersList());\r\n    this.props.dispatch(deleteDataUser());\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <TableComponent />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect()(ListContactContainer);","import axios from \"axios\";\r\n\r\nexport const GET_USERS_LIST = \"GET_USERS_LIST\";\r\nexport const GET_USER_DETAIL = \"GET_USER_DETAIL\";\r\nexport const POST_USER_CREATE = \"POST_USER_CREATE\";\r\nexport const PUT_USER_EDIT = \"PUT_USER_EDIT\";\r\n\r\nexport const getUsersList = () => {\r\n  return (dispatch) => {\r\n    axios\r\n      .get(\"https://simple-contact-crud.herokuapp.com/contact\")\r\n      .then(function (response) {\r\n        dispatch({\r\n          type: GET_USERS_LIST,\r\n          payload: {\r\n            data: response.data,\r\n            errorMessage: false,\r\n          },\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        dispatch({\r\n          type: GET_USERS_LIST,\r\n          payload: {\r\n            data: false,\r\n            errorMessage: error.message,\r\n          },\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const getUserDetail = (id) => {\r\n  return (dispatch) => {\r\n    axios\r\n      .get(\"https://simple-contact-crud.herokuapp.com/contact\" + id)\r\n      .then(function (response) {\r\n        dispatch({\r\n          type: GET_USER_DETAIL,\r\n          payload: {\r\n            data: response.data,\r\n            errorMessage: false,\r\n          },\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        dispatch({\r\n          type: GET_USER_DETAIL,\r\n          payload: {\r\n            data: false,\r\n            errorMessage: error.message,\r\n          },\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const postUserCreate = (data) => {\r\n  return (dispatch) => {\r\n    axios\r\n      .post(\"https://simple-contact-crud.herokuapp.com/contact\", data)\r\n      .then(function (response) {\r\n        console.log(response);\r\n\r\n        dispatch({\r\n          type: POST_USER_CREATE,\r\n          payload: {\r\n            data: response.data,\r\n            errorMessage: false,\r\n          },\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        dispatch({\r\n          type: POST_USER_CREATE,\r\n          payload: {\r\n            data: false,\r\n            errorMessage: error.message,\r\n          },\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const putUserUpdate = (data, id) => {\r\n  return (dispatch) => {\r\n    axios\r\n      .put(\"https://simple-contact-crud.herokuapp.com/contact\" + id, data)\r\n      .then(function (response) {\r\n        console.log(response);\r\n\r\n        dispatch({\r\n          type: PUT_USER_EDIT,\r\n          payload: {\r\n            data: response.data,\r\n            errorMessage: false,\r\n          },\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        dispatch({\r\n          type: PUT_USER_EDIT,\r\n          payload: {\r\n            data: false,\r\n            errorMessage: error.message,\r\n          },\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const deleteUser = (id) => {\r\n  return (dispatch) => {\r\n    axios\r\n      .delete(\"https://simple-contact-crud.herokuapp.com/contact\" + id)\r\n      .then(function (response) {\r\n        console.log(response);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n};\r\n\r\nexport const deleteDataUser = () => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: GET_USER_DETAIL,\r\n      payload: {\r\n        data: false,\r\n        errorMessage: false,\r\n      },\r\n    });\r\n\r\n    dispatch({\r\n      type: POST_USER_CREATE,\r\n      payload: {\r\n        data: false,\r\n        errorMessage: false,\r\n      },\r\n    });\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Row, Col, Button } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst BackComponent = () => {\r\n  return (\r\n    <Row className=\"mb-2\">\r\n      <Col>\r\n        <Link to=\"/\">\r\n          <Button color=\"dark\">\r\n            Back\r\n          </Button>\r\n        </Link>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default BackComponent;\r\n","import React, { Component } from 'react'\r\nimport { Container } from 'reactstrap'\r\nimport BackComponent from '../components/BackComponent'\r\n\r\nexport default class CreateContact extends Component {\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <BackComponent/>\r\n                <h1>Create Contact</h1>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Container } from 'reactstrap'\r\nimport BackComponent from '../components/BackComponent'\r\n\r\nexport default class DetailContact extends Component {\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <BackComponent/>\r\n                <h1>Detail Contact</h1>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Container } from 'reactstrap'\r\nimport BackComponent from '../components/BackComponent'\r\n\r\nexport default class EditContact extends Component {\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <BackComponent/>\r\n                <h1>Edit Contact</h1>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\nimport NavbarComponent from \"./components/NavbarComponent\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport ListContactContainer from \"./containers/ListContactContainer\";\nimport CreateContact from \"./containers/CreateContact\";\nimport DetailContact from \"./containers/DetailContact\";\nimport EditContact from \"./containers/EditContact\";\n\nexport default class App extends Component {\n\n  render() {\n    return (\n      <div>\n        <NavbarComponent />\n        <BrowserRouter>\n          <Route path=\"/\" exact>\n            <ListContactContainer />\n          </Route>\n          <Route path=\"/create\" exact>\n            <CreateContact/>\n          </Route>\n          <Route path=\"/detail/:id\" exact>\n            <DetailContact/>\n          </Route>\n          <Route path=\"/edit/:id\" exact>\n            <EditContact/>\n          </Route>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  GET_USERS_LIST,\r\n  GET_USER_DETAIL,\r\n  POST_USER_CREATE,\r\n  PUT_USER_EDIT,\r\n} from \"../actions/userAction\";\r\n\r\nlet initialState = {\r\n  getUsersList: false,\r\n  errorUsersList: false,\r\n  getUserDetail: false,\r\n  errorUserDetail: false,\r\n  getResponDataUser: false,\r\n  errorResponDataUser: false,\r\n  title: \"Wahidev Academy\",\r\n};\r\n\r\nconst users = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_USERS_LIST:\r\n      return {\r\n        ...state,\r\n        getUsersList: action.payload.data,\r\n        errorUsersList: action.payload.errorMessage,\r\n      };\r\n\r\n    case GET_USER_DETAIL:\r\n      return {\r\n        ...state,\r\n        getUserDetail: action.payload.data,\r\n        errorUserDetail: action.payload.errorMessage,\r\n      };\r\n\r\n    case POST_USER_CREATE:\r\n      return {\r\n        ...state,\r\n        getResponDataUser: action.payload.data,\r\n        errorResponDataUser: action.payload.errorMessage,\r\n      };\r\n\r\n    case PUT_USER_EDIT:\r\n      return {\r\n        ...state,\r\n        getResponDataUser: action.payload.data,\r\n        errorResponDataUser: action.payload.errorMessage,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default users;","import { combineReducers } from 'redux'\r\nimport users from './users'\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nexport default combineReducers({\r\n    users,\r\n    form: formReducer\r\n}) ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./reducers\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(reducer, compose(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}